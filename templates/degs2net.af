filter_node_list){
	source ~soft_bio_267/initializes/init_degenes_hunter
	while read line || [[ -n $line ]]; do
		dataset=`echo -e "$line" | cut -f 1`
		input_files=`echo -e "$line" | cut -f 2 | tr "," "\n"`
		rm "exp_genes_"$dataset
		for input_file in ${input_files[@]}; do
			?
			grep -v 'FILTERED_OUT' $input_file | cut -f 1 | grep ENSG >> "exp_genes_"$dataset
			ngenes=`grep -v 'FILTERED_OUT' $input_file | wc -l`
			nDEGs=`grep -w 'PREVALENT_DEG' $input_file | wc -l`
			nover=`grep -w 'PREVALENT_DEG' $input_file | awk -F"\t" '$2>0' | wc -l`
			nunder=`grep -w 'PREVALENT_DEG' $input_file | awk -F"\t" '$2<0' | wc -l`
			echo -e "$dataset\tngenes\t"$ngenes >> $wf_execution/all_metrics
			echo -e "$dataset\tnDEGs\t"$nDEGs >> $wf_execution/all_metrics
			echo -e "$dataset\tnover\t"$nover >> $wf_execution/all_metrics
			echo -e "$dataset\tnunder\t"$nunder >> $wf_execution/all_metrics
			grep -w 'PREVALENT_DEG' $input_file | awk -F"\t" '$2>0' | cut -f 1,2 |sort -rk 2 | head -n 5 | sed '1i ENSEMBL_code\tLogFC' > "top_overexp_"$dataset
			add_annotation.R -i "top_overexp_"$dataset -o "top_overexp_tmp_"$dataset -I ENSEMBL
			tail -n+2 "top_overexp_tmp_"$dataset | sed 's/$/\t'$dataset'/g' > "top_overexp_annotated_"$dataset
			grep -w 'PREVALENT_DEG' $input_file | awk -F"\t" '$2<0' | cut -f 1,2 |sort -rk 2 | head -n 5 | sed '1i ENSEMBL_code\tLogFC' > "top_underexp_"$dataset
			add_annotation.R -i "top_underexp_"$dataset -o "top_underexp_tmp_"$dataset -I ENSEMBL
			tail -n+2 "top_underexp_tmp_"$dataset | sed 's/$/\t'$dataset'/g' > "top_underexp_annotated_"$dataset
		done
	done  < $execution_parameters
	cat exp_genes_* | sort -u > final_expressed_list	
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

gather_expressed_genes){
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	grep -vf filter_node_list)/final_expressed_list $db_path/string_network.txt | cut -f 1,2 | tr '\t' '\n'| sort -u > ./discarded_genes.txt
	?
	netanalyzer -i $db_path/string_network.txt -f pair -l main -d ./discarded_genes.txt --filter_connected_components 5 --output_network ./nodes_network
	cut -f 1,2 nodes_network | tr '\t' '\n' | sort -u | sed '1s/^/Gene\n/' > ./ENS_genes
	add_annotation.R -i ./ENS_genes -o ./ENS_genes_annotated -I ENSEMBL
	tail -n+2 ./ENS_genes_annotated> ./ENS_genes_dictionary
	standard_name_replacer -i ./nodes_network -I ./ENS_genes_dictionary -c 1,2 -f 1 -t 2 -o ./nodes_network_annotated
	rm  ./ENS_genes_annotated
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

degree_normalization){
	source ~soft_bio_267/initializes/init_python
	resources: -m '60gb' -t '0-02:30:00'
	?
	text2binary_matrix -i gather_expressed_genes)/nodes_network -o adjacency_matrix -t pair -O bin -s matrix_metrics --normalize_by "rows_cols" 
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

get_embedding){
	source ~soft_bio_267/initializes/init_python
	resources: -m '500gb' -t '1-00:00:00' -n 'cal'
	export PYTHONHASHSEED=123456
	?
	netanalyzer --seed $PYTHONHASHSEED -i degree_normalization)/adjacency_matrix.npy -n degree_normalization)/adjacency_matrix_rowIds.lst \
	-f bin -k "node2vec" -K embedding_coords --both_repre_formats -l 'genes' -u 'genes' \
	--embedding_add_options "'window':10,'num_walks':10,'walk_length':100,'dimensions':128" --embedding_coords
	netanalyzer -i degree_normalization)/adjacency_matrix.npy -n degree_normalization)/adjacency_matrix_rowIds.lst \
	 -f bin -k "node2vec" -K kernel --both_repre_formats -z -l 'genes' -u 'genes' \
	 --embedding_add_options "'window':10,'num_walks':10,'walk_length':100,'dimensions':128" 
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

get_cluster_embedding_[$datasets]){
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	echo (*) > tracker
	resources: -m '500gb' -t '1-00:00:00' -n 'cal'
	input_files=`awk -F '\t' '$1 == "(*)" {print $0}' $execution_parameters | cut -f 2 | tr "," "\n"`
	rm DEG_merged_list
	for input_file in ${input_files[@]}; do
		grep -w 'PREVALENT_DEG' $input_file | cut -f 1 >> DEG_merged_list
	done
	cat DEG_merged_list | sort -u | sed 's/$/\t(*)/g' > DEG_list_per_dataset
	DEG_list=`cat DEG_merged_list | sort -u | tr '\n' ',' | sed 's/,$//'`
	DEG_list_number=`cat DEG_merged_list | wc -l`
	genes_out_network=`grep -f DEG_merged_list $db_path'/string_network_genes.txt' | wc -l`
	int_miss_genes=`echo "$DEG_list_number - $genes_out_network" | bc`
	intersect_columns -a DEG_merged_list -b $db_path'/string_network_genes.txt' -k a > unmapped_DEGs.txt
	nunmapped_DEGs=`cat unmapped_DEGs.txt | wc -l`
	grep -f unmapped_DEGs.txt $db_path'/seq_type' > unmapped_gene_type
	nunmapped_genes=`grep -cw gene unmapped_gene_type`
	nunmapped_ncRNA=`grep -cw ncRNA_gene unmapped_gene_type`
	grep -w 'ncRNA_gene' unmapped_gene_type | cut -f 2 > ncRNA_tmp
	if [ ! -s ncRNA_tmp ];then
		echo "There are no ncRNA."
	else
		grep -f ncRNA_tmp $input_files | cut -f 1,2 > ncRNA
		sed -i '1i ENSEMBL_CODE\tLogFC' ncRNA
		add_annotation.R -i ncRNA -o ncRNA_annotated_tmp -I ENSEMBL
		tail -n+2 ncRNA_annotated_tmp | sed 's/$/\t(*)/g' > ncRNA_annotated
		rm ncRNA_annotated_tmp
	fi
	nunmapped_pseudo=`grep -cw pseudogene unmapped_gene_type`
	?
	netanalyzer -i "NULL" --embedding_coords --external_embedding get_embedding)'/embedding_coords.npy',get_embedding)'/embedding_coords_rowIds.lst' --cluster_embedding "HDBSCAN" \
	-r $DEG_list --cluster_embedding_add_options "'min_cluster_size': 2,'min_samples': 2" --output_build_clusters groups_from_embedding
	if [ ! -s groups_from_embedding ];then
		nclusters=0
		genes_in_clusters=0
		echo "No clusters were found"
	else
		aggregate_column_data -i groups_from_embedding -x 1 -a 2 -s ',' > clusters_aggregated.txt
		nclusters=`cat clusters_aggregated.txt | wc -l`
		genes_in_clusters=`cut -f 2 groups_from_embedding | wc -l`
		sed '1i Cluster_id\tGene' groups_from_embedding > cluster_genes_tmp
		add_annotation.R -i cluster_genes_tmp -o cluster_genes_annotated -c 2 -I ENSEMBL
		aggregate_column_data -i cluster_genes_annotated -x 1 -a 3 -s ',' > cluster_genes_aggregated
		tail -n+2 cluster_genes_aggregated | sed 's/$/\t(*)/g' > cluster_genes
	fi
	echo -e "(*)\tint_miss_genes\t"$int_miss_genes >> $wf_execution/all_metrics
	echo -e "(*)\tnunmapped_DEGs\t"$nunmapped_DEGs >> $wf_execution/all_metrics
	echo -e "(*)\tnunmapped_genes\t"$nunmapped_genes >> $wf_execution/all_metrics
	echo -e "(*)\tnunmapped_ncRNA\t"$nunmapped_ncRNA >> $wf_execution/all_metrics
	echo -e "(*)\tnunmapped_pseudo\t"$nunmapped_pseudo >> $wf_execution/all_metrics
	echo -e "(*)\tnclusters\t"$nclusters >> $wf_execution/all_metrics
	echo -e "(*)\tgenes_in_clusters\t"$genes_in_clusters >> $wf_execution/all_metrics
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

cluster_prioritization_[$datasets]){
	resources: -c 1 -t 0-00:59:59 -m '100gb'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	echo (*) > tracker
	target_genes=`awk -F '\t' '$1 == "(*)" {print $0}' $execution_parameters | cut -f 3`
	if [ ! -s !get_cluster_embedding_*!/clusters_aggregated.txt ]; then
		echo "No clusters were found and thus, prioritization of clusters is not possible."
	else
		cut -f 1 !get_cluster_embedding_*!/clusters_aggregated.txt | sed 's/$/\t'"$target_genes"'/' > ./disease_genes.txt
		text2binary_matrix -i gather_expressed_genes)/nodes_network -t "pair" -O "bin" -o ./nodes_network_matrix
		?
		ranker -k get_embedding)/kernel.npy -n get_embedding)/embedding_coords_rowIds.lst --adj_matrix ./nodes_network_matrix.npy \
											--seed_nodes !get_cluster_embedding_*!/clusters_aggregated.txt \
											-f disease_genes.txt --score2pvalue "logistic" --representation_seed_metric "fisher" 
		sed '1i candidates\tscore\tnormalized_score\trank\tuniq_rank\tseed_group' ranked_genes_all_candidates
		sed 's/$/\t(*)/g' ranked_genes_all_candidates > ranked_clusters
	fi
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

non_cluster_prioritization_[$datasets]){
	resources: -c 1 -t 0-00:59:59 -m '100gb' -n 'cal'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	echo (*) > tracker
	cut -f 2 !get_cluster_embedding_*!/groups_from_embedding > cluster_genes.txt
	grep -vf !get_cluster_embedding_*!/unmapped_DEGs.txt !get_cluster_embedding_*!/DEG_merged_list > mapped_DEGs
	grep -vf cluster_genes.txt mapped_DEGs | awk 'BEGIN{FS="\t"; OFS=FS}{print $1,$1}' > genes_not_clustered.txt
	target_genes=`awk -F '\t' '$1 == "(*)" {print $0}' $execution_parameters | cut -f 3`
	cut -f 1 genes_not_clustered.txt | sed 's/$/\t'"$target_genes"'/' > disease_genes.txt 
	?
	ranker -k get_embedding)/kernel.npy -n get_embedding)'/embedding_coords_rowIds.lst' --adj_matrix !cluster_prioritization_*!/nodes_network_matrix.npy \
										--seed_nodes genes_not_clustered.txt \
										-f disease_genes.txt --score2pvalue "logistic" --representation_seed_metric "fisher"
	sort -k4 -g ranked_genes_all_candidates | head > top_genes_tmp
	sed -i '1i candidates\tscore\tnormalized_score\trank\tuniq_rank\tgene' top_genes_tmp
	add_annotation.R -i top_genes_tmp -o top_genes_annotated -c 6 -I ENSEMBL
	tail -n+2 top_genes_annotated | sed 's/$/\t(*)/g' > noncluster_ranked_top_genes
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

all_datasets_prioritization){
	resources: -c 1 -t 0-00:59:59 -m '100gb' -n 'cal'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	input_files=`cut -f 2 $execution_parameters`	
	rm DEG_merged_list
	for input_file in ${input_files[@]}; do
		grep -w 'PREVALENT_DEG' $input_file | cut -f 1 >> DEG_merged_list
	done
	sort -u DEG_merged_list | tr '\n' ',' | sed 's/,$//' | sed 's/^/seed_causal\t/'  > DEG_list
	cat !get_cluster_embedding_!/DEG_list_per_dataset > DEGs_per_dataset
	cut -f 3 $execution_parameters | sort -u | tr '\n' ',' | sed 's/,$//' | sed 's/^/seed_causal\t/' > seed_genes
	?
	ranker -k get_embedding)/kernel.npy -n get_embedding)/kernel_rowIds.lst --adj_matrix !cluster_prioritization_*!/nodes_network_matrix.npy \
										--seed_nodes seed_genes \
										-f DEG_list --score2pvalue "logistic" --representation_seed_metric "fisher"	
	sort -k4 -g ranked_genes_all_candidates | head -n 10 > top_genes_tmp
	sed -i '1i candidates\tscore\tnormalized_score\trank\tuniq_rank\tseed_group' top_genes_tmp
	add_annotation.R -i top_genes_tmp -o top_genes_annotated -c 1 -I ENSEMBL
	tail -n+2 top_genes_annotated > all_DEGs_ranked_top_genes_tmp
	cut -f 1 all_DEGs_ranked_top_genes_tmp > top_genes_ENS
	cut -f 1 $execution_parameters > dataset_names
	cut -f 2 $execution_parameters > input_files
	rm gene_values
	for dataset in `cat dataset_names`
	do
        for line in `cat top_genes_ENS`
        do
                path=`grep $dataset input_files`
                grep -w $line $path | awk ' {print $1, $2, $4}' | sed 's/$/\t'$dataset'/' | awk  '{print $1, $4, $2","$3}' | tr ' ' '\t' >> gene_values
        done
	done
	create_metric_table gene_values ENSEMBL_GENE final_table_tmp
	head -n 1 final_table_tmp | sed 's/ENSEMBL_GENE\t//' | sed 's/^/ENS_GENE\tSCORE\tNORMALIZED_SCORE\tRANK\tUNIQ_RANK\tSEED_GROUP\tPRIORITIZED_GENE\t/' > header
	tail -n+2 final_table_tmp > final_table
	merge_tabular all_DEGs_ranked_top_genes_tmp final_table > all_DEGs_ranked_top_genes_no_header
	cat header all_DEGs_ranked_top_genes_no_header > all_DEGs_ranked_top_genes_header
	awk '{FS=OFS="\t"}{print $7,$0}' all_DEGs_ranked_top_genes_header | cut -f 1-6,9- > all_DEGs_ranked_top_genes
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi		
}


ABCC6_prioritization){ 
	resources: -c 1 -t 0-00:59:59 -m '100gb' -n 'cal'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	echo 'ENSG00000091262' | sed 's/^/seed_causal\t/' > seed_ABCC6
	input_files=`cut -f 2 $execution_parameters`	
	rm DEG_merged_list
	for input_file in ${input_files[@]}; do
		grep -w 'PREVALENT_DEG' $input_file | cut -f 1 >> DEG_merged_list
	done
	sort -u DEG_merged_list | tr '\n' ',' > DEG_list
	cut -f 3 $execution_parameters | sort -u | tr '\n' ',' | sed 's/,$//' > causal_genes
	cat DEG_list causal_genes | sed 's/^/seed_causal\t/' > filtered_genes
	?
	ranker -k get_embedding)/kernel.npy -n get_embedding)/kernel_rowIds.lst --adj_matrix !cluster_prioritization_*!/nodes_network_matrix.npy \
										--seed_nodes seed_ABCC6 \
										-f filtered_genes --score2pvalue "logistic" --representation_seed_metric "fisher"	
	sort -k4 -g ranked_genes_all_candidates | head -n 10 > top_genes_tmp
	sed -i '1i candidates\tscore\tnormalized_score\trank\tuniq_rank\tseed_group' top_genes_tmp
	add_annotation.R -i top_genes_tmp -o top_genes_annotated -c 1 -I ENSEMBL
	tail -n+2 top_genes_annotated > all_DEGs_ranked_top_genes_tmp
	cut -f 1 all_DEGs_ranked_top_genes_tmp > top_genes_ENS
	cut -f 1 $execution_parameters > dataset_names
	cut -f 2 $execution_parameters > input_files
	rm gene_values
	for dataset in `cat dataset_names`
	do
        for line in `cat top_genes_ENS`
        do
                path=`grep $dataset input_files`
                grep -w $line $path > gene_value
                if [ ! -s gene_value ];then
                	echo -e $line'\t'$dataset'\tNA,NA' >> gene_values 
                else
                	awk ' {print $1, $2, $4}' gene_value | sed 's/$/\t'$dataset'/' | awk  '{print $1, $4, $2","$3}' | tr ' ' '\t' >> gene_values
                fi

        done
	done
	create_metric_table gene_values ENSEMBL_GENE final_table_tmp
	head -n 1 final_table_tmp | sed 's/ENSEMBL_GENE\t//' | sed 's/^/ENS_GENE\tSCORE\tNORMALIZED_SCORE\tRANK\tUNIQ_RANK\tSEED_GROUP\tPRIORITIZED_GENE\t/' > header
	tail -n+2 final_table_tmp > final_table
	merge_tabular all_DEGs_ranked_top_genes_tmp final_table > all_DEGs_ranked_top_genes_no_header
	cat header all_DEGs_ranked_top_genes_no_header > all_DEGs_ranked_top_genes_header
	awk '{FS=OFS="\t"}{print $7,$0}' all_DEGs_ranked_top_genes_header | cut -f 1-6,9- > all_DEGs_ranked_top_genes
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi	
}

network_representation_[$datasets]){
	resources: -c 32 -t 7-00:00:00 -m '182gb' -n 'cal'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	echo (*) > tracker
	awk -F '\t' '$1 == "(*)" {print $0}' $execution_parameters | cut -f 3 > target_genes
	sed -i -e 's/^/seed\t/' target_genes
	sed -i '1s/^/seed\tENSEMBL_gene\n/' target_genes 
	add_annotation.R -i target_genes -o target_genes_tmp -c 2 -I ENSEMBL
	cut -f 1,3 target_genes_tmp | tail -n+2  > target_genes
	sed '1i Cluster_id\tENSEMBL_gene' !get_cluster_embedding_*!/groups_from_embedding > group_nodes
	add_annotation.R -i group_nodes -o group_nodes_tmp -c 2 -I ENSEMBL
	cut -f 1,3 group_nodes_tmp | tail -n+2  > group_nodes
	cut -f 2 group_nodes | sed 's/^/(*)\t/' > group_nodes_dataset
	rm group_nodes_tmp 
	export PYTHONHASHSEED=123456
	LAYERS='gene,[A-Za-z0-9]'
	?
	net_explorer --seed $PYTHONHASHSEED -i "string,gather_expressed_genes)/nodes_network_annotated" --seed_nodes target_genes \
	-N -T 1 --graph_options 'method=sigma2,width=1200px,height=900px,iterations=200,style=safe' --embedding_proj "umap" -G group_nodes -g network_umap_SAFE &>nt_umap_log_SAFE & 
	net_explorer --seed $PYTHONHASHSEED -i "string,gather_expressed_genes)/nodes_network_annotated" --seed_nodes target_genes \
	-N -T 1 --graph_options 'method=sigma2,width=1200px,height=900px,iterations=200' --embedding_proj "umap" -G group_nodes -g network_umap &>nt_umap_log & 
	wait
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

whole_network_representation){
	resources: -c 32 -t 7-00:00:00 -m '182gb' -n 'cal'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	cut -f 3 $execution_parameters | sort -u | sed 's/^/seed\t/' > disease_genes_tmp
	sed -i '1s/^/seed\tENSEMBL_gene\n/' disease_genes_tmp
	add_annotation.R -i disease_genes_tmp -o disease_genes -c 2 -I ENSEMBL
	cut -f 1,3 disease_genes | tail -n+2  > target_genes_tmp
	aggregate_column_data -i target_genes_tmp -x 1 -a 2 -s ',' > target_genes
	target_genes=`cut -f 2 target_genes`
	cat !network_representation_!/group_nodes_dataset > group_nodes_tmp
	cut -f 1 $execution_parameters | awk '{print NR, $0}' OFS='\t' > dataset_dict
	standard_name_replacer -i group_nodes_tmp -I dataset_dict -c 1 -f 2 -t 1 > group_nodes
	export PYTHONHASHSEED=123456
	LAYERS='gene,[A-Za-z0-9]'
	?
	netanalyzer -i gather_expressed_genes)"/nodes_network_annotated" -l $LAYERS -g network_all_SAFE \
	--graph_options 'method=sigma2,width=1200px,height=900px,iterations=200,style=safe' -G group_nodes -r $target_genes &>network_log_SAFE &
	netanalyzer -i gather_expressed_genes)"/nodes_network_annotated" -l $LAYERS -g network_all \
	--graph_options 'method=sigma2,width=1200px,height=900px,iterations=200' -G group_nodes -r $target_genes &>network_log &
	wait
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}

ABCC6_network_representation){
	resources: -c 32 -t 7-00:00:00 -m '182gb' -n 'cal'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	cut -f 3 $execution_parameters | sort -u | sed 's/^/seed\t/' > disease_genes_tmp
	sed -i '1s/^/seed\tENSEMBL_gene\n/' disease_genes_tmp
	add_annotation.R -i disease_genes_tmp -o disease_genes -c 2 -I ENSEMBL
	cut -f 1,3 disease_genes | tail -n+2  > target_genes_tmp
	aggregate_column_data -i target_genes_tmp -x 1 -a 2 -s ',' > target_genes_noABCC6
	target_genes=`cut -f 2 target_genes_noABCC6 | sed 's/$/,ABCC6/'`
	cat !network_representation_!/group_nodes_dataset > group_nodes_tmp
	cut -f 1 $execution_parameters | awk '{print NR, $0}' OFS='\t' > dataset_dict
	standard_name_replacer -i group_nodes_tmp -I dataset_dict -c 1 -f 2 -t 1 > group_nodes
	export PYTHONHASHSEED=123456
	LAYERS='gene,[A-Za-z0-9]'
	?
	netanalyzer -i gather_expressed_genes)"/nodes_network_annotated" -l $LAYERS -g network_all_SAFE \
	--graph_options 'method=sigma2,width=1200px,height=900px,iterations=200,style=safe' -G group_nodes -r $target_genes &>network_log_SAFE &
	netanalyzer -i gather_expressed_genes)"/nodes_network_annotated" -l $LAYERS -g network_all \
	--graph_options 'method=sigma2,width=1200px,height=900px,iterations=200' -G group_nodes -r $target_genes &>network_log &
	wait
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
	}

functional_analysis_[$datasets]){
	resources: -c 16 -t 0-00:59:59 -m '60gb' -n 'cal'
	echo (*) > tracker
	source ~soft_bio_267/initializes/init_degenes_hunter
	if [ ! -s !get_cluster_embedding_*!/clusters_aggregated.txt ];then
		echo "No clusters were found. Stopping functional analysis."
	else
	?
	clusters_to_enrichment.R -i !get_cluster_embedding_*!/clusters_aggregated.txt -w [cpu] -o functional_results -f MF,BP,CC -p $pvalue_cutoff -k ENSEMBL -O "Human"
	fi
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}


DEGs_per_dataset_functional){
	resources: -c 16 -t 0-00:59:59 -m '60gb' -n 'cal'
	source ~soft_bio_267/initializes/init_degenes_hunter
	cat !subgraph_extraction_clustering_!/DEG_list_per_dataset_agg > aggregated_DEGs_per_dataset
	?
	clusters_to_enrichment.R -i aggregated_DEGs_per_dataset -w [cpu] -o functional_results -f MF,BP,CC -p 0.01 -k ENSEMBL -O "Human" -M "PRS"
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}
