filter_node_list){
	source ~soft_bio_267/initializes/init_degenes_hunter
	while read line || [[ -n $line ]]; do
		dataset=`echo -e "$line" | cut -f 1`
		input_files=`echo -e "$line" | cut -f 2 | tr "," "\n"`
		rm "exp_genes_"$dataset
		for input_file in ${input_files[@]}; do
			?
			grep -v 'FILTERED_OUT' $input_file | cut -f 1 | grep ENSG >> "exp_genes_"$dataset
			ngenes=`grep -v 'FILTERED_OUT' $input_file | tail -n +2 | wc -l`
			nDEGs=`grep -w 'PREVALENT_DEG' $input_file | tail -n +2 | wc -l`
			nover=`grep -w 'PREVALENT_DEG' $input_file | tail -n +2 | awk -F"\t" '$2>0' | wc -l`
			nunder=`grep -w 'PREVALENT_DEG' $input_file | tail -n +2 | awk -F"\t" '$2<0' | wc -l`
			echo -e "$dataset\tngenes\t"$ngenes >> $wf_execution/all_metrics
			echo -e "$dataset\tnDEGs\t"$nDEGs >> $wf_execution/all_metrics
			echo -e "$dataset\tnover\t"$nover >> $wf_execution/all_metrics
			echo -e "$dataset\tnunder\t"$nunder >> $wf_execution/all_metrics			
		done
	done  < $execution_parameters
	cat exp_genes_* | sort -u > final_expressed_list	
}

%gather_expressed_genes){
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	#grep -vf filter_node_list)/final_expressed_list $db_path/string_network.txt > ./discarded_genes_network.txt
	grep -vf filter_node_list)/final_expressed_list $db_path/string_network.txt | cut -f 1,2 | tr '\t' '\n'| sort -u > ./discarded_genes.txt
	?
	netanalyzer -i $db_path/string_network.txt -f pair -l main -d ./discarded_genes.txt --filter_connected_components 5 --output_network ./nodes_network
	cut -f 1,2 nodes_network | tr '\t' '\n' | sort -u | sed '1s/^/Gene\n/' > ./ENS_genes
	add_annotation.R -i ./ENS_genes -o ./ENS_genes_annotated -I ENSEMBL
	tail -n+2 ./ENS_genes_annotated> ./ENS_genes_dictionary
	standard_name_replacer -i ./nodes_network -I ./ENS_genes_dictionary -c 1,2 -f 1 -t 2 -o ./nodes_network_annotated
	rm  ./ENS_genes_annotated
}

%degree_normalization){
	resources: -m '60gb' -t '0-02:30:00'
	echo -e "normalize_matrix ('adjacency_matrices',('gene','gene')) by='rows_cols'" > dsl
	echo -e "write_matrix ('adjacency_matrices',('gene','gene')) 'adjacency_matrix'" >> dsl
	?
	netanalyzer -i gather_expressed_genes)/nodes_network -f pair -l "gene" --both_repre_formats --dsl_script dsl
}

%get_embedding){
	resources: -m '500gb' -t '1-00:00:00'
	?
	netanalyzer -i degree_normalization)/adjacency_matrix.npy -n degree_normalization)/adjacency_matrix_rowIds \
	 -f bin -k "node2vec" -K kernel --both_repre_formats -z -l 'genes' -u 'genes' --embedding_add_options "'window':10,'num_walks':10,'walk_length':100,'dimensions':128"
}


%subgraph_extraction_clustering_[$datasets]){
	resources: -c 1 -t 0-00:59:59 -m '10gb'
	source ~soft_bio_267/initializes/init_python
	echo (*) > tracker
	input_files=`awk -F '\t' '$1 == "(*)" {print $0}' $execution_parameters | cut -f 2 | tr "," "\n"`
	for input_file in ${input_files[@]}; do
		grep -w 'PREVALENT_DEG' $input_file | cut -f 1 >> DEG_merged_list
	done
	sort -u DEG_merged_list > DEG_list
	sed -i -e 's/^/seed\t/' DEG_list
	?
	netanalyzer -i gather_expressed_genes)/nodes_network -f pair -o . -l genes -b louvain -G DEG_list \
														 --seed 1 --output_build_clusters ./louvain_discovered_clusters_tmp.txt
	cut -f 2,3 louvain_discovered_clusters_tmp.txt > louvain_discovered_clusters.txt
	netanalyzer -i gather_expressed_genes)/nodes_network -G ./louvain_discovered_clusters.txt -M "size;internal_edge_density" \
				--output_metrics_by_cluster ./metrics_louvain_clusters
	awk 'BEGIN{FS=OFS="\t"}{if ($2 >= 5 && $3 >= 0.3) print $0}' metrics_louvain_clusters > cluster_reduction
	aggregate_column_data -i louvain_discovered_clusters_tmp.txt -x 2 -a 3 -s ',' > clusters_aggregated_tmp.txt
	cut -f 1 cluster_reduction | tail -n+2 > cluster_reduction_ids
	grep -wf cluster_reduction_ids clusters_aggregated_tmp.txt > clusters_aggregated.txt
}

%cluster_prioritization_[$datasets]){
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	echo (*) > tracker
	target_genes=`awk -F '\t' '$1 == "(*)" {print $0}' $execution_parameters | cut -f 3`
	cut -f 1 !subgraph_extraction_clustering_*!/clusters_aggregated.txt | sed 's/$/\t'"$target_genes"'/' > ./disease_genes.txt
	text2binary_matrix -i gather_expressed_genes)/nodes_network -t "pair" -O "bin" -o ./nodes_network_matrix
	?
	ranker -k get_embedding)/kernel.npy -n get_embedding)/kernel_rowIds --adj_matrix ./nodes_network_matrix.npy \
										--seed_nodes !subgraph_extraction_clustering_*!/clusters_aggregated.txt \
										-f disease_genes.txt --score2pvalue "logistic" --representation_seed_metric "fisher" \
										--output_top top_genes -t 5 
	add_annotation.R -i top_genes -o top_genes_annotated -I ENSEMBL
}


%network_representation_[$datasets]){
	resources: -c 1 -t 0-00:59:59 -m '10gb'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	echo (*) > tracker
	awk -F '\t' '$1 == "(*)" {print $0}' $execution_parameters | cut -f 3 > target_genes
	sed -i -e 's/^/seed\t/' target_genes
	sed -i '1s/^/seed\tENSEMBL_gene\n/' target_genes 
	add_annotation.R -i target_genes -o target_genes_tmp -c 2 -I ENSEMBL
	cut -f 1,3 target_genes_tmp | tail -n+2  > target_genes
	cut -f 2,3 !subgraph_extraction_clustering_*!/der_discovered_clusters.txt > group_nodes
	sed -i '1s/^/Cluster_id\tENSEMBL_gene\n/' group_nodes 
	add_annotation.R -i group_nodes -o group_nodes_tmp -c 2 -I ENSEMBL
	cut -f 1,3 group_nodes_tmp | tail -n+2  > group_nodes
	rm group_nodes_tmp 
	LAYERS='gene,[A-Za-z0-9]'
	?
	net_explorer -i "string,gather_expressed_genes)/nodes_network_annotated" --seed_nodes target_genes -N --graph_options 'method=sigma2,width=1200px,height=900px,iterations=200' --embedding_proj "umap" -G group_nodes -g network_umap
}

%functional_analysis_[$datasets]){
	resources: -c 16 -t 0-00:59:59 -m '60gb'
	echo (*) > tracker
	source ~soft_bio_267/initializes/init_degenes_hunter
	?
	clusters_to_enrichment.R -i !subgraph_extraction_clustering_*!/clusters_aggregated.txt -w [cpu] -o functional_results -f MF,BP,CC,KEGG,Reactome -p $pvalue_cutoff -k ENSEMBL -O "Human"
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}
