filter_node_list_[$datasets]){
	source ~soft_bio_267/initializes/init_degenes_hunter
	input_file=`grep -w (*) $execution_parameters | cut -f 2`   
	?
	grep 'FILTERED_OUT' $input_file | cut -f 1 | grep ENS > discarded_genes
	sed -i '1s/^/ENSEMBL_gene\n/' discarded_genes
	add_annotation.R -i discarded_genes -o discarded_genes_annotated -I ENSEMBL
}

gather_expressed_genes){
	source ~soft_bio_267/initializes/init_python
	paths=( !JobRegExp:filter_node_list:-!/discarded_genes )
	cat $paths > discard_list
	sort -u discard_list > final_discard_list
	#grep -vf final_discard_list $db_path/string_network.txt > filtered_nodes_network.txt
	?
	#netanalyzer -i filtered_nodes_network.txt -f pair -l main --output_network nodes_network
	netanalyzer -i $db_path/string_network.txt -f pair -l main -d final_discard_list --filter_connected_components 5 --output_network nodes_network
	#rm filtered_nodes_network.txt
	cut -f 1 ./nodes_network > ENS_genes_tmp
	cut -f 2 ./nodes_network >> ENS_genes_tmp
	sort -u ENS_genes_tmp | sed '1s/^/Gene\n/' > ENS_genes
	add_annotation.R -i ENS_genes -o ENS_genes_annotated -I ENSEMBL
	tail -n+2 ENS_genes_annotated > ENS_genes_dictionary
	standard_name_replacer -i ./nodes_network -I ENS_genes_dictionary -c 1,2 -f 1 -t 2 -o nodes_network_annotated
	rm ENS_genes_tmp ENS_genes ENS_genes_annotated
}

degree_normalization){
	resources: -m '60gb' -t '0-02:30:00'
	echo -e "normalize_matrix ('adjacency_matrices',('gene','gene')) by='rows_cols'" > dsl
	echo -e "write_matrix ('adjacency_matrices',('gene','gene')) 'adjacency_matrix'" >> dsl
	?
	netanalyzer -i gather_expressed_genes)/nodes_network -f pair -l "gene" --both_repre_formats --dsl_script dsl
}

get_embedding){
	resources: -m '500gb' -t '1-00:00:00'
	?
	netanalyzer -i degree_normalization)/adjacency_matrix.npy -n degree_normalization)/adjacency_matrix_rowIds \
	 -f bin -k "rf" -K kernel --both_repre_formats -z -l 'genes' -u 'genes'
}


subgraph_extraction_clustering_[$datasets]){
	resources: -c 1 -t 0-00:59:59 -m '10gb'
	source ~soft_bio_267/initializes/init_python
	input_file=`grep -w (*) $execution_parameters | cut -f 2` 
	grep -w 'PREVALENT_DEG' $input_file | cut -f 1 > DEG_list
	sed -i -e 's/^/seed\t/' DEG_list
	?
	netanalyzer -i gather_expressed_genes)/nodes_network -f pair -o . -l genes -b der -G DEG_list --seed 1 --output_build_clusters ./der_discovered_clusters.txt
	aggregate_column_data -i der_discovered_clusters.txt -x 2 -a 3 -s ',' > clusters_aggregated.txt
}


cluster_prioritization_[$datasets]){
	source ~soft_bio_267/initializes/init_python
	target_genes=`grep -w (*) $execution_parameters | cut -f 3`
	awk '{print $1}' !subgraph_extraction_clustering_*!/clusters_aggregated.txt | sed 's/$/\t'"$target_genes"'/' > ./disease_genes.txt
	?
	ranker -k get_embedding)/kernel.npy -n get_embedding)/kernel_rowIds --seed_nodes !subgraph_extraction_clustering_*!/clusters_aggregated.txt -f disease_genes.txt 
}

network_representation_[$datasets]){
	resources: -c 1 -t 0-00:59:59 -m '10gb'
	source ~soft_bio_267/initializes/init_python
	source ~soft_bio_267/initializes/init_degenes_hunter
	target_genes=`grep -w (*) $execution_parameters | cut -f 3`
	cut -f 2,3 !subgraph_extraction_clustering_*!/der_discovered_clusters.txt > group_nodes
	sed -i '1s/^/Cluster_id\tENSEMBL_gene\n/' group_nodes 
	add_annotation.R -i group_nodes -o group_nodes_tmp -c 2 -I ENSEMBL
	cut -f 1,3 group_nodes_tmp | tail -n+2  > group_nodes
	rm group_nodes_tmp 
	LAYERS='gene,[A-Za-z0-9]'
	?
	netanalyzer -i gather_expressed_genes)/nodes_network_annotated -l $LAYERS -g gene_network --graph_options 'method=sigma2,width=1200px,height=900px,iterations=200' -G group_nodes -r $target_genes 
}

functional_analysis_[$datasets]){
	resources: -c 16 -t 0-00:59:59 -m '60gb'
	source ~soft_bio_267/initializes/init_degenes_hunter
	?
	clusters_to_enrichment.R -i !subgraph_clustering_*!/clusters_aggregated.txt -w [cpu] -o functional_results -f MF,BP,CC,KEGG,Reactome -p $pvalue_cutoff -k ENSEMBL -O "Human"
	retVal=$?
    if [ $retVal -ne 0 ]; then
        echo ERROR: Last command exited with code $retVal
        exit $retVal
    fi
}
